/* libsplat.h generated by valac 0.27.1, the Vala compiler, do not modify */


#ifndef __GEN_LIBSPLAT_H__
#define __GEN_LIBSPLAT_H__

#include <glib.h>
#include <gtk/gtk.h>
#include <stdlib.h>
#include <string.h>
#include <glib-object.h>
#include <float.h>
#include <math.h>
#include <json-glib/json-glib.h>
#include <gee.h>
#include <gio/gio.h>

G_BEGIN_DECLS


#define LIBSPLAT_TYPE_PANEL (libsplat_panel_get_type ())
#define LIBSPLAT_PANEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LIBSPLAT_TYPE_PANEL, libsplatPanel))
#define LIBSPLAT_IS_PANEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LIBSPLAT_TYPE_PANEL))
#define LIBSPLAT_PANEL_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), LIBSPLAT_TYPE_PANEL, libsplatPanelIface))

typedef struct _libsplatPanel libsplatPanel;
typedef struct _libsplatPanelIface libsplatPanelIface;

#define LIBSPLAT_TYPE_PLUGIN_MANAGER (libsplat_plugin_manager_get_type ())
#define LIBSPLAT_PLUGIN_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LIBSPLAT_TYPE_PLUGIN_MANAGER, libsplatPluginManager))
#define LIBSPLAT_PLUGIN_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LIBSPLAT_TYPE_PLUGIN_MANAGER, libsplatPluginManagerClass))
#define LIBSPLAT_IS_PLUGIN_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LIBSPLAT_TYPE_PLUGIN_MANAGER))
#define LIBSPLAT_IS_PLUGIN_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LIBSPLAT_TYPE_PLUGIN_MANAGER))
#define LIBSPLAT_PLUGIN_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LIBSPLAT_TYPE_PLUGIN_MANAGER, libsplatPluginManagerClass))

typedef struct _libsplatPluginManager libsplatPluginManager;
typedef struct _libsplatPluginManagerClass libsplatPluginManagerClass;
typedef struct _libsplatPluginManagerPrivate libsplatPluginManagerPrivate;

#define LIBSPLAT_TYPE_PREFERENCES (libsplat_preferences_get_type ())
#define LIBSPLAT_PREFERENCES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LIBSPLAT_TYPE_PREFERENCES, libsplatPreferences))
#define LIBSPLAT_PREFERENCES_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LIBSPLAT_TYPE_PREFERENCES, libsplatPreferencesClass))
#define LIBSPLAT_IS_PREFERENCES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LIBSPLAT_TYPE_PREFERENCES))
#define LIBSPLAT_IS_PREFERENCES_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LIBSPLAT_TYPE_PREFERENCES))
#define LIBSPLAT_PREFERENCES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LIBSPLAT_TYPE_PREFERENCES, libsplatPreferencesClass))

typedef struct _libsplatPreferences libsplatPreferences;
typedef struct _libsplatPreferencesClass libsplatPreferencesClass;
typedef struct _libsplatPreferencesPrivate libsplatPreferencesPrivate;

#define LIBSPLAT_PREFERENCES_TYPE_ITEM_INFO (libsplat_preferences_item_info_get_type ())
typedef struct _libsplatPreferencesItemInfo libsplatPreferencesItemInfo;

struct _libsplatPanelIface {
	GTypeInterface parent_iface;
	const gchar* (*get_title) (libsplatPanel* self);
	void (*set_title) (libsplatPanel* self, const gchar* value);
	const gchar* (*get_command) (libsplatPanel* self);
	void (*set_command) (libsplatPanel* self, const gchar* value);
};

struct _libsplatPluginManager {
	GObject parent_instance;
	libsplatPluginManagerPrivate * priv;
};

struct _libsplatPluginManagerClass {
	GObjectClass parent_class;
};

typedef gchar* (*libsplatPluginManagerCommand) (gchar** args, int args_length1, void* user_data);
struct _libsplatPreferences {
	GObject parent_instance;
	libsplatPreferencesPrivate * priv;
};

struct _libsplatPreferencesClass {
	GObjectClass parent_class;
};

struct _libsplatPreferencesItemInfo {
	gchar* name;
	gchar* id;
	gchar* command;
	gchar* accel;
};


GType libsplat_panel_get_type (void) G_GNUC_CONST;
const gchar* libsplat_panel_get_title (libsplatPanel* self);
void libsplat_panel_set_title (libsplatPanel* self, const gchar* value);
const gchar* libsplat_panel_get_command (libsplatPanel* self);
void libsplat_panel_set_command (libsplatPanel* self, const gchar* value);
GType libsplat_plugin_manager_get_type (void) G_GNUC_CONST;
void libsplat_plugin_manager_load_plugins (libsplatPluginManager* self);
void libsplat_plugin_manager_open_panel (libsplatPluginManager* self, libsplatPanel* panel);
void libsplat_plugin_manager_register_command (libsplatPluginManager* self, const gchar* name, libsplatPluginManagerCommand cmd, void* cmd_target, GDestroyNotify cmd_target_destroy_notify);
gchar* libsplat_plugin_manager_call_command (libsplatPluginManager* self, const gchar* name, gchar** args, int args_length1);
gchar* libsplat_plugin_manager_call_command_str (libsplatPluginManager* self, const gchar* command);
GObject* libsplat_plugin_manager_get_plugin (libsplatPluginManager* self, const gchar* name);
libsplatPluginManager* libsplat_plugin_manager_get_instance (void);
GType libsplat_preferences_get_type (void) G_GNUC_CONST;
gboolean libsplat_preferences_has_key (libsplatPreferences* self, const gchar* key);
gchar* libsplat_preferences_get_string (libsplatPreferences* self, const gchar* key);
gboolean* libsplat_preferences_get_boolean (libsplatPreferences* self, const gchar* key);
gdouble* libsplat_preferences_get_double (libsplatPreferences* self, const gchar* key);
gint* libsplat_preferences_get_int (libsplatPreferences* self, const gchar* key);
gchar** libsplat_preferences_get_array (libsplatPreferences* self, const gchar* key, int* result_length1);
void libsplat_preferences_set_string (libsplatPreferences* self, const gchar* key, const gchar* value);
void libsplat_preferences_set_boolean (libsplatPreferences* self, const gchar* key, gboolean value);
void libsplat_preferences_set_int (libsplatPreferences* self, const gchar* key, gint value);
void libsplat_preferences_set_double (libsplatPreferences* self, const gchar* key, gdouble value);
void libsplat_preferences_set_array (libsplatPreferences* self, const gchar* key, gchar** value, int value_length1);
void libsplat_preferences_set_all (libsplatPreferences* self, const gchar* key, JsonObject* new_obj);
void libsplat_preferences_delete_key (libsplatPreferences* self, const gchar* key);
void libsplat_preferences_write (libsplatPreferences* self);
GType libsplat_preferences_item_info_get_type (void) G_GNUC_CONST;
libsplatPreferencesItemInfo* libsplat_preferences_item_info_dup (const libsplatPreferencesItemInfo* self);
void libsplat_preferences_item_info_free (libsplatPreferencesItemInfo* self);
void libsplat_preferences_item_info_copy (const libsplatPreferencesItemInfo* self, libsplatPreferencesItemInfo* dest);
void libsplat_preferences_item_info_destroy (libsplatPreferencesItemInfo* self);
void libsplat_preferences_register_menu (libsplatPreferences* self, const gchar* name, GeeList* menu);
GMenuModel* libsplat_preferences_get_menu (libsplatPreferences* self, GtkApplication* group);
libsplatPreferences* libsplat_preferences_new (void);
libsplatPreferences* libsplat_preferences_construct (GType object_type);
libsplatPreferences* libsplat_preferences_get_instance (void);


G_END_DECLS

#endif
