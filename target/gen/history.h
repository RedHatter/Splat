/* history.h generated by valac 0.27.1, the Vala compiler, do not modify */


#ifndef __GEN_HISTORY_H__
#define __GEN_HISTORY_H__

#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <gtk/gtk.h>

G_BEGIN_DECLS


#define TYPE_ACTION (action_get_type ())
#define ACTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_ACTION, Action))
#define IS_ACTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_ACTION))
#define ACTION_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), TYPE_ACTION, ActionIface))

typedef struct _Action Action;
typedef struct _ActionIface ActionIface;

#define TYPE_DELETE (delete_get_type ())
#define DELETE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_DELETE, Delete))
#define DELETE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_DELETE, DeleteClass))
#define IS_DELETE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_DELETE))
#define IS_DELETE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_DELETE))
#define DELETE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_DELETE, DeleteClass))

typedef struct _Delete Delete;
typedef struct _DeleteClass DeleteClass;
typedef struct _DeletePrivate DeletePrivate;

#define TYPE_GROUP (group_get_type ())
#define GROUP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_GROUP, Group))
#define GROUP_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_GROUP, GroupClass))
#define IS_GROUP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_GROUP))
#define IS_GROUP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_GROUP))
#define GROUP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_GROUP, GroupClass))

typedef struct _Group Group;
typedef struct _GroupClass GroupClass;
typedef struct _GroupPrivate GroupPrivate;

#define TYPE_HISTORY_PLUGIN (history_plugin_get_type ())
#define HISTORY_PLUGIN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HISTORY_PLUGIN, HistoryPlugin))
#define HISTORY_PLUGIN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_HISTORY_PLUGIN, HistoryPluginClass))
#define IS_HISTORY_PLUGIN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HISTORY_PLUGIN))
#define IS_HISTORY_PLUGIN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_HISTORY_PLUGIN))
#define HISTORY_PLUGIN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HISTORY_PLUGIN, HistoryPluginClass))

typedef struct _HistoryPlugin HistoryPlugin;
typedef struct _HistoryPluginClass HistoryPluginClass;
typedef struct _HistoryPluginPrivate HistoryPluginPrivate;

#define TYPE_HISTORY (history_get_type ())
#define HISTORY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_HISTORY, History))
#define HISTORY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_HISTORY, HistoryClass))
#define IS_HISTORY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_HISTORY))
#define IS_HISTORY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_HISTORY))
#define HISTORY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_HISTORY, HistoryClass))

typedef struct _History History;
typedef struct _HistoryClass HistoryClass;
typedef struct _HistoryPrivate HistoryPrivate;

#define TYPE_INSERT (insert_get_type ())
#define INSERT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_INSERT, Insert))
#define INSERT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_INSERT, InsertClass))
#define IS_INSERT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_INSERT))
#define IS_INSERT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_INSERT))
#define INSERT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_INSERT, InsertClass))

typedef struct _Insert Insert;
typedef struct _InsertClass InsertClass;
typedef struct _InsertPrivate InsertPrivate;

struct _ActionIface {
	GTypeInterface parent_iface;
	void (*undo) (Action* self);
	void (*redo) (Action* self);
	gboolean (*merge) (Action* self, Action* action);
	gchar* (*render) (Action* self);
	const gchar* (*get_text) (Action* self);
	void (*set_text) (Action* self, const gchar* value);
	gint (*get_start) (Action* self);
	void (*set_start) (Action* self, gint value);
	gint (*get_end) (Action* self);
	void (*set_end) (Action* self, gint value);
};

struct _Delete {
	GObject parent_instance;
	DeletePrivate * priv;
};

struct _DeleteClass {
	GObjectClass parent_class;
};

struct _Group {
	GObject parent_instance;
	GroupPrivate * priv;
};

struct _GroupClass {
	GObjectClass parent_class;
};

struct _HistoryPlugin {
	GObject parent_instance;
	HistoryPluginPrivate * priv;
};

struct _HistoryPluginClass {
	GObjectClass parent_class;
};

struct _History {
	GObject parent_instance;
	HistoryPrivate * priv;
};

struct _HistoryClass {
	GObjectClass parent_class;
};

struct _Insert {
	GObject parent_instance;
	InsertPrivate * priv;
};

struct _InsertClass {
	GObjectClass parent_class;
};


GType action_get_type (void) G_GNUC_CONST;
void action_undo (Action* self);
void action_redo (Action* self);
gboolean action_merge (Action* self, Action* action);
gchar* action_render (Action* self);
const gchar* action_get_text (Action* self);
void action_set_text (Action* self, const gchar* value);
gint action_get_start (Action* self);
void action_set_start (Action* self, gint value);
gint action_get_end (Action* self);
void action_set_end (Action* self, gint value);
GType delete_get_type (void) G_GNUC_CONST;
Delete* delete_new (GtkTextBuffer* buffer, gint start, gint end, const gchar* text);
Delete* delete_construct (GType object_type, GtkTextBuffer* buffer, gint start, gint end, const gchar* text);
GType group_get_type (void) G_GNUC_CONST;
Action* group_get (Group* self, gint i);
void group_add (Group* self, Action* action);
Group* group_new (void);
Group* group_construct (GType object_type);
gint group_get_size (Group* self);
GType history_plugin_get_type (void) G_GNUC_CONST;
void history_plugin_init (HistoryPlugin* self);
gchar* history_plugin_toggle_panel (HistoryPlugin* self, gchar** args, int args_length1);
gchar* history_plugin_undo (HistoryPlugin* self, gchar** args, int args_length1);
gchar* history_plugin_redo (HistoryPlugin* self, gchar** args, int args_length1);
HistoryPlugin* history_plugin_new (void);
HistoryPlugin* history_plugin_construct (GType object_type);
GType history_get_type (void) G_GNUC_CONST;
History* history_new (GtkTextView* doc);
History* history_construct (GType object_type, GtkTextView* doc);
void history_undo (History* self);
void history_redo (History* self);
void history_undo_to (History* self, Action* action);
void history_redo_to (History* self, Action* action);
GtkTreeStore* history_get_model (History* self);
GType insert_get_type (void) G_GNUC_CONST;
Insert* insert_new (GtkTextBuffer* buffer, gint start, gint end, const gchar* text);
Insert* insert_construct (GType object_type, GtkTextBuffer* buffer, gint start, gint end, const gchar* text);
Action* insert_reverse (Insert* self);


G_END_DECLS

#endif
