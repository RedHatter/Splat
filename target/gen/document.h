/* document.h generated by valac 0.27.1, the Vala compiler, do not modify */


#ifndef __GEN_DOCUMENT_H__
#define __GEN_DOCUMENT_H__

#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <gtk/gtk.h>
#include <pango/pango.h>

G_BEGIN_DECLS


#define TYPE_DOCUMENT_PLUGIN (document_plugin_get_type ())
#define DOCUMENT_PLUGIN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_DOCUMENT_PLUGIN, DocumentPlugin))
#define DOCUMENT_PLUGIN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_DOCUMENT_PLUGIN, DocumentPluginClass))
#define IS_DOCUMENT_PLUGIN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_DOCUMENT_PLUGIN))
#define IS_DOCUMENT_PLUGIN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_DOCUMENT_PLUGIN))
#define DOCUMENT_PLUGIN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_DOCUMENT_PLUGIN, DocumentPluginClass))

typedef struct _DocumentPlugin DocumentPlugin;
typedef struct _DocumentPluginClass DocumentPluginClass;
typedef struct _DocumentPluginPrivate DocumentPluginPrivate;

#define TYPE_GUTTER (gutter_get_type ())
#define GUTTER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_GUTTER, Gutter))
#define GUTTER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_GUTTER, GutterClass))
#define IS_GUTTER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_GUTTER))
#define IS_GUTTER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_GUTTER))
#define GUTTER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_GUTTER, GutterClass))

typedef struct _Gutter Gutter;
typedef struct _GutterClass GutterClass;
typedef struct _GutterPrivate GutterPrivate;

struct _DocumentPlugin {
	GObject parent_instance;
	DocumentPluginPrivate * priv;
};

struct _DocumentPluginClass {
	GObjectClass parent_class;
};

struct _Gutter {
	GtkLabel parent_instance;
	GutterPrivate * priv;
};

struct _GutterClass {
	GtkLabelClass parent_class;
};


GType document_plugin_get_type (void) G_GNUC_CONST;
void document_plugin_init (DocumentPlugin* self);
gchar* document_plugin_new_view (DocumentPlugin* self, gchar** args, int args_length1);
gchar* document_plugin_insert (DocumentPlugin* self, gchar** args, int args_length1);
gchar* document_plugin_delete (DocumentPlugin* self, gchar** args, int args_length1);
gchar* document_plugin_contents (DocumentPlugin* self, gchar** args, int args_length1);
gchar* document_plugin_active (DocumentPlugin* self, gchar** args, int args_length1);
gchar* document_plugin_rename (DocumentPlugin* self, gchar** args, int args_length1);
GtkTextView* document_plugin_get_view (DocumentPlugin* self, const gchar* id);
gchar* document_plugin_get_id_by_index (DocumentPlugin* self, gint index);
void document_plugin_set_active (DocumentPlugin* self, const gchar* id);
DocumentPlugin* document_plugin_new (void);
DocumentPlugin* document_plugin_construct (GType object_type);
const gchar* document_plugin_get_active_id (DocumentPlugin* self);
GType gutter_get_type (void) G_GNUC_CONST;
Gutter* gutter_new (GtkTextView* doc);
Gutter* gutter_construct (GType object_type, GtkTextView* doc);
void gutter_calc_width (Gutter* self);
GtkTextView* gutter_get_doc (Gutter* self);
void gutter_get_active_color (Gutter* self, PangoColor* result);
void gutter_set_active_color (Gutter* self, PangoColor* value);
gint gutter_get_cursor (Gutter* self);
gint gutter_get_line_count (Gutter* self);
void gutter_set_line_count (Gutter* self, gint value);


G_END_DECLS

#endif
